type Error = variant {
    Unauthorized: record { msg: text };
    NotFound: record { msg: text };
    InvalidInput: record { msg: text };
};

type HistoryEntry = record {
    timestamp: nat64;
    event: text;
};

type Property = record {
    id: nat64;
    address: text;
    owner_id: nat64;
    tokenized_shares: nat64;
    created_at: nat64;
    created_by: principal;
    updated_at: opt nat64;
    updated_by: opt principal;
    history: vec HistoryEntry;
};

type PropertyPayload = record {
    address: text;
    tokenized_shares: nat64;
    owner_id: nat64;
};

type User = record {
    id: nat64;
    name: text;
    contact_info: text;
    created_at: nat64;
    created_by: principal;
    updated_at: opt nat64;
    updated_by: opt principal;
};

type UserPayload = record {
    name: text;
    contact_info: text;
};

service : {
    add_property: (PropertyPayload) -> (result Property error Error) query;
    update_property: (nat64, PropertyPayload) -> (result Property error Error);
    delete_property: (nat64) -> (result Property error Error);
    get_property: (nat64) -> (result Property error Error) query;
    get_all_properties: (nat64, nat64) -> (vec Property) query;

    add_user: (UserPayload) -> (result User error Error);
    update_user: (nat64, UserPayload) -> (result User error Error);
    delete_user: (nat64) -> (result User error Error);
    get_user: (nat64) -> (result User error Error) query;
    get_all_users: (nat64, nat64) -> (vec User) query;

    transfer_ownership: (nat64, nat64, nat64, nat64) -> (result Property error Error);
}
